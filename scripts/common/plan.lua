
--local resource = mjrequire "common/resource"
local typeMaps = mjrequire "common/typeMaps"
local locale = mjrequire "common/locale"
--local skill = mjrequire "common/skill"

local plan = {}

local typeIndexMap = typeMaps.types.plan

plan.mineChopPriorityOffset = 1.0
plan.craftBuildPriorityOffset = 2.0
plan.huntFireLightPriorityOffset = 5.0
plan.treatMedicalPriorityOffset = 10.0
plan.recruitPriorityOffset = 20.0
plan.transferPriorityOffset = 1.0

plan.types = typeMaps:createMap("plan", {
    {
        key = "build",
        name = locale:get("plan_build"),
        inProgress = locale:get("plan_build_inProgress"),
        icon = "icon_hammer",
        skipFinalReachableCollisionPathCheck = true,
        requiresLight = true, --this is actually special cased for build plans, as campfires and torches should be allowed to be built
        checkCanCompleteForRadialUI = true,
        priorityOffset = plan.craftBuildPriorityOffset,
    },
    {
        key = "plant",
        name = locale:get("plan_plant"),
        inProgress = locale:get("plan_plant_inProgress"),
        icon = "icon_plant",
        skipFinalReachableCollisionPathCheck = true,
        requiresLight = true,
        checkCanCompleteForRadialUI = true,
        priorityOffset = plan.craftBuildPriorityOffset,
    },
    {
        key = "dig",
        name = locale:get("plan_dig"),
        inProgress = locale:get("plan_dig_inProgress"),
        icon = "icon_dig",
        skipFinalReachableCollisionAndVerticalityPathCheck = true,
        pathProximityDistance = mj:mToP(3.0),
        requiresLight = true,
        checkCanCompleteForRadialUI = true,
        modifiesTerrainHeight = true,
        priorityOffset = plan.mineChopPriorityOffset,
    },
    {
        key = "mine",
        name = locale:get("plan_mine"),
        inProgress = locale:get("plan_mine_inProgress"),
        icon = "icon_mine",
        skipFinalReachableCollisionAndVerticalityPathCheck = true,
        pathProximityDistance = mj:mToP(3.0),
        requiresLight = true,
        checkCanCompleteForRadialUI = true,
        modifiesTerrainHeight = true,
        priorityOffset = plan.mineChopPriorityOffset,
    },
    {
        key = "clear",
        name = locale:get("plan_clear"),
        inProgress = locale:get("plan_clear_inProgress"),
        icon = "icon_clear",
        skipFinalReachableCollisionAndVerticalityPathCheck = true,
        requiresLight = true,
        checkCanCompleteForRadialUI = true,
        priorityOffset = plan.mineChopPriorityOffset,
    },
    {
        key = "fill",
        name = locale:get("plan_fill"),
        inProgress = locale:get("plan_fill_inProgress"),
        icon = "icon_dig",
        skipFinalReachableCollisionAndVerticalityPathCheck = true,
        pathProximityDistance = mj:mToP(3.0),
        requiresLight = true,
        checkCanCompleteForRadialUI = true,
        modifiesTerrainHeight = true,
        priorityOffset = plan.mineChopPriorityOffset,
    },
    {
        key = "chop",
        name = locale:get("plan_chop"),
        inProgress = locale:get("plan_chop_inProgress"),
        icon = "icon_axe",
        skipFinalReachableCollisionPathCheck = true,
        requiresLight = true,
        checkCanCompleteForRadialUI = true,
        priorityOffset = plan.mineChopPriorityOffset,
    },
    {
        key = "chopReplant",
        name = locale:get("plan_chopReplant"),
        inProgress = locale:get("plan_chopReplant_inProgress"),
        icon = "icon_axe",
        skipFinalReachableCollisionPathCheck = true,
        requiresLight = true,
        checkCanCompleteForRadialUI = true,
        priorityOffset = plan.mineChopPriorityOffset,
    },
    {
        key = "storeObject",
        name = locale:get("plan_storeObject"),
        inProgress = locale:get("plan_storeObject_inProgress"),
        icon = "icon_store",
        checkCanCompleteForRadialUI = true,
        skipFinalReachableCollisionPathCheck = true,
        allowOtherPlanTypesToBeAssignedSimultaneously = {
            [typeIndexMap.removeObject] = true,
            [typeIndexMap.transferObject] = true,
            [typeIndexMap.deliverToCompost] = true,
            [typeIndexMap.haulObject] = true,
        },
        priorityOffset = plan.transferPriorityOffset,
    },
    {
        key = "transferObject",
        name = locale:get("plan_transferObject"),
        inProgress = locale:get("plan_transferObject_inProgress"),
        icon = "icon_logistics",
        allowOtherPlanTypesToBeAssignedSimultaneously = {
            [typeIndexMap.removeObject] = true,
            [typeIndexMap.storeObject] = true,
            [typeIndexMap.deliverToCompost] = true,
            [typeIndexMap.haulObject] = true,
        },
        priorityOffset = plan.transferPriorityOffset,
        multipleSapiensMaxAssignCountOnStorageAreas = 3,
    },
    {
        key = "pullOut",
        name = locale:get("plan_pullOut"),
        inProgress = locale:get("plan_pullOut_inProgress"),
        icon = "icon_axe",
        skipFinalReachableCollisionPathCheck = true,
        requiresLight = true,
        checkCanCompleteForRadialUI = true,
        priorityOffset = plan.mineChopPriorityOffset,
    },
    {
        key = "removeObject",
        name = locale:get("plan_removeObject"),
        inProgress = locale:get("plan_removeObject_inProgress"),
        icon = "icon_hand",
        skipFinalReachableCollisionPathCheck = true,
        allowOtherPlanTypesToBeAssignedSimultaneously = {
            [typeIndexMap.storeObject] = true,
            [typeIndexMap.transferObject] = true,
            [typeIndexMap.deliverToCompost] = true,
            [typeIndexMap.haulObject] = true,
        },
        priorityOffset = plan.mineChopPriorityOffset,
        multipleSapiensMaxAssignCountOnStorageAreas = 3,
    },
    {
        key = "gather",
        name = locale:get("plan_gather"),
        inProgress = locale:get("plan_gather_inProgress"),
        icon = "icon_hand",
        skipFinalReachableCollisionPathCheck = true,
        checkCanCompleteForRadialUI = true,
        priorityOffset = plan.mineChopPriorityOffset,
    },
    {
        key = "moveTo",
        name = locale:get("plan_moveTo"),
        inProgress = locale:get("plan_moveTo_inProgress"),
        icon = "icon_feet",
        skipMaxOrderChecks = true,
    },
    {
        key = "wait",
        name = locale:get("plan_wait"),
        inProgress = locale:get("plan_wait_inProgress"),
        icon = "icon_hand",
        skipMaxOrderChecks = true,
    },
    {
        key = "moveAndWait",
        name = locale:get("plan_moveAndWait"),
        inProgress = locale:get("plan_moveAndWait_inProgress"),
        icon = "icon_moveAndWait",
        skipMaxOrderChecks = true,
    },
    {
        key = "light",
        name = locale:get("plan_light"),
        inProgress = locale:get("plan_light_inProgress"),
        icon = "icon_fire",
        checkCanCompleteForRadialUI = true,
        priorityOffset = plan.mineChopPriorityOffset,
        skipFinalReachableCollisionPathCheck = true,
    },
    {
        key = "extinguish",
        name = locale:get("plan_extinguish"),
        inProgress = locale:get("plan_extinguish_inProgress"),
        icon = "icon_extinguish",
        checkCanCompleteForRadialUI = true,
        priorityOffset = plan.huntFireLightPriorityOffset,
        skipFinalReachableCollisionPathCheck = true,
    },
    {
        key = "hunt",
        name = locale:get("plan_hunt"),
        inProgress = locale:get("plan_hunt_inProgress"),
        icon = "icon_spear",
        checkCanCompleteForRadialUI = true,
        shouldRunWherePossible = true,
        injuryRisk = 2.0,
        priorityOffset = plan.huntFireLightPriorityOffset,
    },
    {
        key = "craft",
        name = locale:get("plan_craft"),
        inProgress = locale:get("plan_craft_inProgress"),
        icon = "icon_craft",
        preventsResourceUseInOtherPlans = true,
        requiresLight = true,
        allowOtherPlanTypesToBeAssignedSimultaneously = {
            [typeIndexMap.addFuel] = true,
        },
        priorityOffset = plan.craftBuildPriorityOffset,
    },
    {
        key = "recruit",
        name = locale:get("plan_recruit"),
        inProgress = locale:get("plan_recruit_inProgress"),
        icon = "icon_tribe2",
        checkCanCompleteForRadialUI = true,
        shouldJogWherePossible = true,
        priorityOffset = plan.recruitPriorityOffset,
    },
    {
        key = "deconstruct",
        name = locale:get("plan_deconstruct"),
        inProgress = locale:get("plan_deconstruct_inProgress"),
        icon = "icon_axe",
        skipFinalReachableCollisionPathCheck = true,
        requiresLight = true,
        checkCanCompleteForRadialUI = true,
        priorityOffset = plan.craftBuildPriorityOffset,
    },
    {
        key = "manageStorage",
        name = locale:get("plan_manageStorage"),
        inProgress = locale:get("plan_manageStorage_inProgress"),
        icon = "icon_store",
    },
    {
        key = "addFuel",
        name = locale:get("plan_addFuel"),
        inProgress = locale:get("plan_addFuel_inProgress"),
        icon = "icon_fire",
        allowOtherPlanTypesToBeAssignedSimultaneously = {
            [typeIndexMap.craft] = true,
            [typeIndexMap.research] = true,
        },
        priorityOffset = plan.huntFireLightPriorityOffset,
        skipFinalReachableCollisionPathCheck = true,
    },
    {
        key = "buildPath",
        name = locale:get("plan_buildPath"),
        inProgress = locale:get("plan_buildPath_inProgress"),
        icon = "icon_path",
        skipFinalReachableCollisionPathCheck = true,
        requiresLight = true,
        checkCanCompleteForRadialUI = true,
        priorityOffset = plan.craftBuildPriorityOffset,
    },
    {
        key = "research",
        name = locale:get("plan_research"),
        inProgress = locale:get("plan_research_inProgress"),
        icon = "icon_idea",
        preventsResourceUseInOtherPlans = true,
        skipFinalReachableCollisionPathCheck = true,
        requiresLight = true,
        checkCanCompleteForRadialUI = true,
        allowOtherPlanTypesToBeAssignedSimultaneously = {
            [typeIndexMap.addFuel] = true,
        },
        priorityOffset = plan.huntFireLightPriorityOffset,
    },
    {
        key = "constructWith",
        name = locale:get("plan_constructWith"),
        inProgress = locale:get("plan_constructWith_inProgress"),
        requiresLight = true,
        icon = "icon_craft",
        priorityOffset = plan.craftBuildPriorityOffset,
        skipFinalReachableCollisionPathCheck = true,
    },
    {
        key = "allowUse",
        name = locale:get("plan_allowUse"),
        inProgress = locale:get("plan_allowUse_inProgress"),
        icon = "icon_hand",
    },
    {
        key = "stop",
        name = locale:get("plan_stop"),
        inProgress = locale:get("plan_stop_inProgress"),
        icon = "icon_cancel",
        skipMaxOrderChecks = true,
    },
    {
        key = "butcher",
        name = locale:get("plan_butcher"),
        inProgress = locale:get("plan_butcher_inProgress"),
        icon = "icon_food",
        skipFinalReachableCollisionPathCheck = true,
        requiresLight = true,
        checkCanCompleteForRadialUI = true,
        priorityOffset = plan.craftBuildPriorityOffset,
    },
    {
        key = "manageSapien",
        name = locale:get("plan_manageSapien"),
        inProgress = locale:get("plan_manageSapien_inProgress"),
        icon = "icon_sapien",
        skipMaxOrderChecks = true,
    },
    {
        key = "clone",
        name = locale:get("plan_clone"),
        inProgress = locale:get("plan_clone_inProgress"),
        icon = "icon_copy",
        skipFinalReachableCollisionPathCheck = true,
        checkCanCompleteForRadialUI = true,
    },
    {
        key = "playInstrument",
        name = locale:get("plan_playInstrument"),
        inProgress = locale:get("plan_playInstrument_inProgress"),
        icon = "icon_music",
        skipFinalReachableCollisionPathCheck = true,
        checkCanCompleteForRadialUI = true,
        priorityOffset = plan.craftBuildPriorityOffset,
    },
    {
        key = "destroyContents",
        name = locale:get("plan_destroyContents"),
        inProgress = locale:get("plan_destroyContents_inProgress"),
        icon = "icon_cancel",
        priorityOffset = plan.mineChopPriorityOffset,
    },
    {
        key = "treatInjury",
        name = locale:get("plan_treatInjury"),
        inProgress = locale:get("plan_treatInjury_inProgress"),
        icon = "icon_injury",
        shouldRunWherePossible = true,
        isMedicineTreatment = true,
        checkCanCompleteForRadialUI = true,
        allowsDespiteStatusEffectSleepRequirements = true,
        priorityOffset = plan.treatMedicalPriorityOffset,
        skipFinalReachableCollisionPathCheck = true,
    },
    {
        key = "treatBurn",
        name = locale:get("plan_treatBurn"),
        inProgress = locale:get("plan_treatBurn_inProgress"),
        icon = "icon_injury",
        shouldRunWherePossible = true,
        isMedicineTreatment = true,
        checkCanCompleteForRadialUI = true,
        allowsDespiteStatusEffectSleepRequirements = true,
        priorityOffset = plan.treatMedicalPriorityOffset,
        skipFinalReachableCollisionPathCheck = true,
    },
    {
        key = "treatFoodPoisoning",
        name = locale:get("plan_treatFoodPoisoning"),
        inProgress = locale:get("plan_treatFoodPoisoning_inProgress"),
        icon = "icon_injury",
        shouldRunWherePossible = true,
        isMedicineTreatment = true,
        checkCanCompleteForRadialUI = true,
        allowsDespiteStatusEffectSleepRequirements = true,
        priorityOffset = plan.treatMedicalPriorityOffset,
        skipFinalReachableCollisionPathCheck = true,
    },
    {
        key = "treatVirus",
        name = locale:get("plan_treatVirus"),
        inProgress = locale:get("plan_treatVirus_inProgress"),
        icon = "icon_injury",
        shouldRunWherePossible = true,
        isMedicineTreatment = true,
        checkCanCompleteForRadialUI = true,
        allowsDespiteStatusEffectSleepRequirements = true,
        priorityOffset = plan.treatMedicalPriorityOffset,
        skipFinalReachableCollisionPathCheck = true,
    },
    {
        key = "fertilize",
        name = locale:get("plan_fertilize"),
        inProgress = locale:get("plan_fertilize_inProgress"),
        icon = "icon_mulch",
        skipFinalReachableCollisionPathCheck = true,
        requiresLight = true,
        checkCanCompleteForRadialUI = true,
        priorityOffset = plan.mineChopPriorityOffset,
    },
    {
        key = "deliverToCompost",
        name = locale:get("plan_deliverToCompost"),
        inProgress = locale:get("plan_deliverToCompost_inProgress"),
        icon = "icon_logistics",
        allowOtherPlanTypesToBeAssignedSimultaneously = {
            [typeIndexMap.removeObject] = true,
            [typeIndexMap.storeObject] = true,
            [typeIndexMap.transferObject] = true,
            [typeIndexMap.haulObject] = true,
        },
        allowLimitlessAssignedForDelivery = true,
        priorityOffset = plan.transferPriorityOffset,
        skipFinalReachableCollisionPathCheck = true,
    },
    {
        key = "startRoute",
        name = locale:get("misc_addNewRouteStartingHere"),
        icon = "icon_logistics",
        priorityOffset = plan.transferPriorityOffset,
    },
    {
        key = "chiselStone",
        name = locale:get("plan_chiselStone"),
        inProgress = locale:get("plan_chiselStone_inProgress"),
        icon = "icon_chisel",
        skipFinalReachableCollisionAndVerticalityPathCheck = true,
        pathProximityDistance = mj:mToP(3.0),
        requiresLight = true,
        checkCanCompleteForRadialUI = true,
        modifiesTerrainHeight = true,
        priorityOffset = plan.mineChopPriorityOffset,
    },
    {
        key = "rebuild",
        name = locale:get("plan_rebuild"),
        inProgress = locale:get("plan_rebuild_inProgress"),
        icon = "icon_rebuild",
        skipFinalReachableCollisionPathCheck = true,
        requiresLight = true,
        priorityOffset = plan.craftBuildPriorityOffset,
    },
    {
        key = "haulObject",
        name = locale:get("plan_haulObject"),
        inProgress = locale:get("plan_haulObject_inProgress"),
        icon = "icon_destinationPin",
        skipFinalReachableCollisionAndVerticalityPathCheck = true,
        priorityOffset = plan.transferPriorityOffset,
        allowOtherPlanTypesToBeAssignedSimultaneously = {
            [typeIndexMap.removeObject] = true,
            [typeIndexMap.storeObject] = true,
            [typeIndexMap.transferObject] = true,
            [typeIndexMap.deliverToCompost] = true,
        },
    },
    {
        key = "greet",
        name = locale:get("plan_greet"),
        inProgress = locale:get("plan_greet_inProgress"),
        icon = "icon_tribeRelations",
        checkCanCompleteForRadialUI = true,
        shouldJogWherePossible = true,
        priorityOffset = plan.recruitPriorityOffset,
    },
    {
        key = "manageTribeRelations",
        name = locale:get("plan_manageTribeRelations"),
        inProgress = locale:get("plan_manageTribeRelations_inProgress"),
        icon = "icon_tribeRelations",
        shouldJogWherePossible = true,
        priorityOffset = plan.transferPriorityOffset,
    },
    --[[{
        key = "take",
        name = locale:get("plan_take"),
        inProgress = locale:get("plan_take_inProgress"),
        icon = "icon_hand",
        checkCanCompleteForRadialUI = true,
        shouldJogWherePossible = true,
        priorityOffset = plan.recruitPriorityOffset,
        multipleSapiensMaxAssignCountOnStorageAreas = 5,
    },]]
    
})


return plan